#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 1 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};


/ {

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
        tap-ms = <100>;
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
        tap-ms = <100>;
    };

    behaviors {
        td_lbkt: tap_dance_lbkt {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LBKT>, <&kp RBKT>;
        };

        td_apos: tap_dance_apos {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp APOS>, <&kp BSLH>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp N1         &kp N2    &kp N3       &kp N4       &kp N5    &kp N6 &kp UP_ARROW    &kp N7 &kp N8    &kp N9    &kp N0   &kp MINUS &kp BACKSPACE
&kp TAB        &kp Q     &kp W        &kp E        &kp R     &kp T  &kp DOWN_ARROW  &kp Y  &kp U     &kp I     &kp O    &kp P     &td_lbkt
&kp ESC        &kp A     &kp S        &kp D        &kp F     &kp G  &kp LEFT_ARROW  &kp H  &kp J     &kp K     &kp L    &kp SEMI  &td_apos
&mt LSHFT NUBS &kp Z     &kp X        &kp C        &kp V     &kp B  &kp RIGHT_ARROW &kp N  &kp M     &kp COMMA &kp DOT  &kp FSLH  &kp RIGHT_SHIFT
&kp C_PP       &kp LCTRL &kp LEFT_ALT &kp LEFT_GUI &kp SPACE &mo 1  &mkp LCLK       &mo 2  &kp SPACE &kp ENTER &kp RALT &kp DELETE
            >;
            display-name = "LAYER0";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_1 {
            bindings = <
&kp F1    &kp F2    &kp F3    &kp F4    &kp F5    &kp F6   &mmv MOVE_UP    &kp F7    &kp F8   &kp F9     &kp F10   &kp EQUAL        &kp DEL
&kp GRAVE &kp GRAVE &mkp LCLK &mkp MCLK &mkp RCLK &mkp MB4 &mmv MOVE_DOWN  &kp PG_UP &kp HOME &kp UP     &kp END   &kp MINUS        &kp RBKT
&trans    &kp TILDE &trans    &trans    &trans    &mkp MB5 &mmv MOVE_LEFT  &kp PG_DN &kp LEFT &kp DOWN   &kp RIGHT &kp LEFT_BRACKET &kp BSLH
&trans    &trans    &trans    &trans    &trans    &trans   &mmv MOVE_RIGHT &trans    &trans   &kp INSERT &kp F11   &kp F12          &trans
&trans    &trans    &trans    &trans    &trans    &trans   &mkp LCLK       &trans    &trans   &trans     &trans    &trans
            >;

            display-name = "LAYER1";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_2 {
            bindings = <
&kp F1     &kp F2 &kp F3 &kp F4    &kp F5    &kp F6       &mmv MOVE_UP    &kp F7       &kp F8 &kp F9 &kp F10 &kp F11   &kp F12
&trans     &trans &trans &trans    &trans    &kp LS(N8)   &mmv MOVE_DOWN  &kp LS(N9)   &trans &trans &trans  &kp EQUAL &kp RBKT
&kp CAPS   &trans &trans &trans    &trans    &kp RA(LBKT) &mmv MOVE_LEFT  &kp RA(RBKT) &trans &trans &trans  &trans    &kp BSLH
&kp NUBS   &trans &trans &kp LC(C) &kp LC(V) &kp RA(APOS) &mmv MOVE_RIGHT &kp RA(BSLH) &trans &trans &trans  &trans    &trans
&kp C_MUTE &trans &trans &trans    &mo 4     &sl 3        &kp ENTER       &trans       &trans &trans &trans  &trans
            >;

            display-name = "LAYER2";
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
        };

        layer_3 {
            bindings = <
&bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4    &trans          &out OUT_USB &trans &trans &trans &trans     &trans &trans
&bt BT_CLR      &bt BT_CLR_ALL  &trans          &trans          &trans          &trans          &out OUT_BLE &trans &trans &trans &trans     &trans &trans
&trans          &rgb_ug RGB_ON  &rgb_ug RGB_SPI &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_EFF &trans       &trans &trans &trans &trans     &trans &trans
&bootloader     &rgb_ug RGB_OFF &rgb_ug RGB_SPD &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_EFR &trans       &trans &trans &trans &trans     &trans &bootloader
&rgb_ug RGB_TOG &sys_reset      &trans          &trans          &trans          &trans          &trans       &trans &trans &trans &sys_reset &soft_off
            >;
            display-name = "LAYER3";
            sensor-bindings = <&rgb_encoder>;
        };

        layer_numpad {
            bindings = <
                &trans &trans &trans &trans &trans &trans &trans &kp KP_NUM &trans    &trans    &trans     &kp KP_MINUS    &trans
                &trans &trans &trans &trans &trans &trans &trans &trans     &kp KP_N7 &kp KP_N8 &kp KP_N9  &kp KP_PLUS     &trans
                &trans &trans &trans &trans &trans &trans &trans &trans     &kp KP_N4 &kp KP_N5 &kp KP_N6  &kp KP_MULTIPLY &kp KP_SLASH
                &trans &trans &trans &trans &trans &trans &trans &trans     &kp KP_N1 &kp KP_N2 &kp KP_N3  &kp KP_EQUAL    &trans
                &trans &trans &trans &trans &trans &trans &trans &trans     &trans    &kp KP_N0 &kp KP_DOT &kp KP_ENTER
            >;
            display-name = "NUMPAD";
            sensor-bindings = <&scroll_encoder>;
        };
    };
};
